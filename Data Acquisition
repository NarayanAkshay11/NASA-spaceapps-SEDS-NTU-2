import pandas as pd
import numpy as np
from astroquery.gaia import Gaia
import random

# Function to convert RA, Dec, and distance to Cartesian coordinates
def spherical_to_cartesian(ra, dec, distance):
    ra_rad = np.radians(ra)
    dec_rad = np.radians(dec)
    x = distance * np.cos(dec_rad) * np.cos(ra_rad)
    y = distance * np.cos(dec_rad) * np.sin(ra_rad)
    z = distance * np.sin(dec_rad)
    return x, y, z

# Function to convert Cartesian coordinates to RA, Dec, and distance
def cartesian_to_spherical(x, y, z):
    distance = np.sqrt(x**2 + y**2 + z**2)
    dec = np.degrees(np.arcsin(z / distance))
    ra = np.degrees(np.arctan2(y, x)) % 360
    return ra, dec, distance

# Function to rotate star coordinates based on planet's pole orientation
def rotate_coordinates(x, y, z, lambda_angle, epsilon_angle):
    lambda_angle = lambda_angle if not np.isnan(lambda_angle) else 0
    epsilon_angle = epsilon_angle if not np.isnan(epsilon_angle) else random.randrange(0,360)
    # Convert angles to radians
    lambda_rad = np.radians(lambda_angle)
    epsilon_rad = np.radians(epsilon_angle)
    #print(lambda_angle,epsilon_angle)
    # Rotation matrix for the longitude (λ)
    Rz = np.array([[np.cos(lambda_rad), -np.sin(lambda_rad), 0],
                   [np.sin(lambda_rad),  np.cos(lambda_rad), 0],
                   [0,                   0,                  1]])

    # Rotation matrix for the obliquity (ε)
    Rx = np.array([[1, 0,                   0],
                   [0, np.cos(epsilon_rad), -np.sin(epsilon_rad)],
                   [0, np.sin(epsilon_rad),  np.cos(epsilon_rad)]])
    
    # Combined rotation matrix (first rotate around z, then around x)
    rotation_matrix = np.dot(Rx, Rz)

    # Apply rotation
    rotated_coordinates = rotation_matrix @ np.array([x, y, z])
    return rotated_coordinates[0], rotated_coordinates[1], rotated_coordinates[2]


# Step 1: Load Gaia star data using astroquery
def load_gaia_data():
    query = "SELECT ra, dec, parallax, phot_g_mean_mag FROM gaiaedr3.gaia_source WHERE parallax > 0 AND phot_g_mean_mag IS NOT NULL"
    #query = "SELECT ra, dec, parallax, phot_g_mean_mag FROM gaiadr3.gaia_source WHERE parallax > 0 AND (1000 / parallax) < 20 AND phot_g_mean_mag IS NOT NULL"
    job = Gaia.launch_job(query)
    
    gaia_star_data = job.get_results()
    
    # Convert the data to a DataFrame
    gaia_star_data = gaia_star_data.to_pandas()
    
    # Convert columns to float
    columns_to_convert = ['ra', 'dec', 'parallax', 'phot_g_mean_mag']
    gaia_star_data[columns_to_convert] = gaia_star_data[columns_to_convert].apply(pd.to_numeric, errors='coerce')
    
    # Convert parallax to distance (in parsecs)
    gaia_star_data['distance'] = 1000 / gaia_star_data['parallax'].astype(float)  # Distance in parsecs


    print(f"Number of stars retrieved: {len(gaia_star_data)}")


    return gaia_star_data

# Step 2: Load exoplanet characteristics from CSV
def load_exoplanet_data(csv_file):
    exoplanet_data = pd.read_csv(csv_file, usecols = ['pl_name','ra', 'dec', 'sy_dist', 'pl_orbincl', 'pl_trueobliq'],on_bad_lines='skip', encoding='utf-8', low_memory = False)
    exoplanet_data = exoplanet_data.dropna(subset=['ra', 'dec', 'sy_dist', 'pl_orbincl', 'pl_trueobliq'])
    return exoplanet_data

# Step 3: Convert star coordinates to exoplanet's perspective
def convert_coordinates(row, exoplanet_ra, exoplanet_dec, exoplanet_distance, lambda_angle, epsilon_angle):
    ra_star = row['ra']
    dec_star = row['dec']
    distance_star = row['distance']  # Distance from Gaia

    # Convert RA/Dec to Cartesian coordinates
    x_star, y_star, z_star = spherical_to_cartesian(ra_star, dec_star, distance_star)
    x_exoplanet, y_exoplanet, z_exoplanet = spherical_to_cartesian(exoplanet_ra, exoplanet_dec, exoplanet_distance)

    # Translate star coordinates to the exoplanet's perspective
    x_relative = x_star - x_exoplanet
    y_relative = y_star - y_exoplanet
    z_relative = z_star - z_exoplanet
    
    # Rotate the coordinates based on the exoplanet's pole orientation
    x_rotated, y_rotated, z_rotated = rotate_coordinates(x_relative, y_relative, z_relative, lambda_angle, epsilon_angle)
    #print(x_rotated,y_rotated,z_rotated)
    # Convert back to spherical coordinates
    new_ra, new_dec, new_distance = cartesian_to_spherical(x_rotated, y_rotated, z_rotated)
    
    apparent_mag_earth = row['phot_g_mean_mag']
    
    if new_distance > 0 and distance_star> 0:
        apparent_mag_planet = apparent_mag_earth + 5 * (np.log10(distance_star / new_distance))
    else:
        apparent_mag_planet = np.nan  # or some other value, e.g., 'inf' or a large number
    #apparent_mag_planet = apparent_mag_earth + 5 * (np.log10(distance_star / new_distance))
    return new_ra, new_dec, new_distance, apparent_mag_planet

# Main function to execute the process
def main():
    # Load Gaia star data
    gaia_star_data = load_gaia_data()

    # Load exoplanet characteristics from CSV
    exoplanet_data = load_exoplanet_data(r'C:\Users\harin\Downloads\PS_2024.10.06_00.12.35.csv')  # Adjust the path as needed

    # Extract 6th exoplanet's parameters(since we use index 7) 
    print(exoplanet_data['pl_name'].values[7])
    exoplanet_ra = exoplanet_data['ra'].values[7].astype(float) #degree
    exoplanet_dec = exoplanet_data['dec'].values[7].astype(float)  #degree
    exoplanet_distance = exoplanet_data['sy_dist'].values[7].astype(float)  # Distance in parsecs
    lambda_angle = exoplanet_data['pl_orbincl'].values[7].astype(float)  # Inclination angle
    epsilon_angle = exoplanet_data['pl_trueobliq'].values[7].astype(float)  # True obliquity angle

    # Convert the coordinates for each star
    converted_data = gaia_star_data.apply(lambda row: convert_coordinates(row, exoplanet_ra, exoplanet_dec, exoplanet_distance, lambda_angle, epsilon_angle), axis=1)

    # Create a new DataFrame with converted metrics
    converted_df = pd.DataFrame(converted_data.tolist(), columns=['new_ra', 'new_dec', 'new_distance','new_mag'])

    # Combine the converted data with original star data
    final_data = pd.concat([gaia_star_data.reset_index(drop=True), converted_df], axis=1)
    print(1)
    # Save the final data to a CSV file
    final_data.to_csv('converted_star_data.csv', index=False)

# Run the main function
if __name__ == "__main__":
    main()
